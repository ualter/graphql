type Loan {
  id: ID!
  credit: Float!
  interest: Float!
  isActive: Boolean!
  balance: Float!
  trust: Int!
  risk: Int!
  calculated: Boolean!
  directive: Boolean!
  foreignCurrency: String!
  borrower: Borrower!
  lenders: [Lender!]!
}


enum Currency {
  EURO
  REAL
  DOLAR
}

extend type Query {
  findAllLoans: [Loan]!
  findAllLoansCreditGreaterThan(credit: Float!): [Loan]!
  sumCreditAllLoans: Float!
  countLoans: Long!
}

input lenderInputList {
	id: ID!
}

extend type Mutation {
  newLoan(credit: Float!, interest: Float!, foreignCurrency: String!, borrower_id: ID!, lenders: [lenderInputList!]!) : Loan!
  deleteLoan(id: ID!) : Boolean!
}